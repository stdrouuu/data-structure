class Student :
    def __init__(self,fname = "", lname = "", yob = 0,mob = 0, dob = 0, sex = "", next = None):
        self.fname = fname
        self.lname = lname
        self.yob = yob
        self.mob = mob
        self.dob = dob
        self.sex = sex 
        self.next = next

start = Student()
last = None
New = None

def insert(node):
    global last
    node = start.next
    last = start
    while node:
        node = node.next
        last = last.next

    if node is None:
        global New
        New = Student()
        New.next = node
        last.next = New
        name = input("\nEnter the first name: ")
        New.fname = name
        name = input("\nEnter the last name: ")
        New.lname = name
        n = int(input("\n Enter the year of birth: "))
        New.yob = n
        n = int(input("\n Enter the month of birth: "))
        New.mob = n
        n = int(input("\n Enter the day of birth: "))
        New.dob = n
        ch = input("\nEnter the sex[m/f]: ")
        New.sex = ch
    
def create(node):
    global start
    n = 0
    ch = ""
    start.next = None
    node = start
    while True:
        node.next = Student()
        node = node.next
        name = input("\nEnter the first name: ")
        node.fname = name
        name = input("\nEnter the last name: ")
        node.lname = name
        n = int(input("\n Enter the year of birth: "))
        node.yob = n
        n = int(input("\n Enter the month of birth: "))
        node.mob = n
        n = int(input("\n Enter the day of birth: "))
        node.dob = n
        ch = input("\nEnter the sex[m/f]: ")
        node.sex = ch
        node.next = None
        ch = input("\nDo you want to create nodes[y/n]: ")
        if ch.lower() == "n":
            break

def delete(node):
    global last
    name = input("\nEnter the first name will be deleted: ")
    node = start.next
    preNode = start
    while node is not None and (node.fname != name or node):
        if node.fname == name:
            preNode.next = node.next
            return
        else:
            preNode = node
            node = node.next
    print("Data not found")

def display(node):
    node = start.next
    while node:
        print(f"\n{node.fname}\t{node.lname}\t{node.yob}\t{node.mob}\t{node.dob}\t{node.sex}")
        node = node.next

#Fungsi rata-rata-------------------------------------------------------------------------------------------------------------------
# mencari usia rata dari seluruh data yang ada
def averageAge(node):
    # node dimulai setelah dummy start(isi data asli)
    node = start.next
    # jika node tidak ada isi
    if node is None:
        return print("Data yang dimasukan tidak ada")
    # contoh tanggal sekarang
    yearNow = 2025
    monthNow = 4
    dayNow = 1
    # index yang dihitung berdasarkan banyaknya looping yang berarti kita dapat menentukan berapa banyak murid yang ada dalam data
    i = 0
    while node:
        # mengecek apakah ditahun ini murid ini sudah berulang tahun atau belom
        ageStudent = yearNow - node.yob
        if monthNow == node.mob:
            if dayNow < node.dob:
                ageStudent = ageStudent - 1
        elif monthNow < node.mob:
            ageStudent = ageStudent - 1
        # melakukan penjumlahan untuk dapat dicari rata rata usia
        if i == 0:
            amountAges = ageStudent
            i += 1
            node = node.next
            continue
        amountAges = amountAges + ageStudent
        node = node.next
        i += 1
    return print(f"\nusia rata rata semua murid adalah {amountAges / i}")
#----------------------------------------------------------------------------------------------------
def main():
    node = None
    create(node)
    while True:
        print("\n1.Add Student\n2.Display Students\n3.Average Ages\n0.Exit")
        opt = int(input("\nEnter the choice: "))
        if opt == 1:
            insert(node)
        elif opt == 2:
            display(node)
        elif opt == 3:
            averageAge(node)
        elif opt == 0:
            break
        else:
            print("\nInvalid Choice")

if __name__ == "__main__":
    main()

